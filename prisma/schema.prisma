// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DEV_DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  salesOrders    SalesOrder[]
  purchaseOrders PurchaseOrder[]
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  inventory       Inventory?
  salesOrderItems SalesOrderItem[]
}

model Supplier {
  id        String   @id @default(uuid())
  name      String
  email     String?
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  purchaseOrders PurchaseOrder[]
}

model Inventory {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @unique
  quantity  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SalesOrder {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  total     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  items SalesOrderItem[]
}

model SalesOrderItem {
  id           String     @id @default(uuid())
  product      Product    @relation(fields: [productId], references: [id])
  productId    String
  salesOrder   SalesOrder @relation(fields: [salesOrderId], references: [id])
  salesOrderId String
  quantity     Int
  price        Float
}

model PurchaseOrder {
  id         String   @id @default(uuid())
  supplier   Supplier @relation(fields: [supplierId], references: [id])
  supplierId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  total      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
